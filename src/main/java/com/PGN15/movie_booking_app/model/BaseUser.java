package com.hiruna.movieticketbooking.model;


import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

import java.util.UUID;

/**
 * Base User class.
 * Stores common user information.
 * Encapsulation is achieved through private attributes and public getters/setters (generated by Lombok @Data).
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class BaseUser {
    private String userId;
    private String username;
    private String password; // In a real app, this should be hashed
    private String email;
    private String contactNumber;

    /**
     * Constructor for creating a new user with a generated ID.
     * @param username User's chosen username.
     * @param password User's chosen password.
     * @param email User's email address.
     * @param contactNumber User's contact phone number.
     */
    public BaseUser(String username, String password, String email, String contactNumber) {
        this.userId = UUID.randomUUID().toString(); // Generate a unique ID
        this.username = username;
        this.password = password;
        this.email = email;
        this.contactNumber = contactNumber;
    }

    /**
     * Converts BaseUser object to a CSV string for file storage.
     * Format: userId,username,password,email,contactNumber
     * @return CSV string representation of the user.
     */
    public String toCsvString() {
        return String.join(",",
                escapeCsv(userId),
                escapeCsv(username),
                escapeCsv(password), // Password stored as is for this project
                escapeCsv(email),
                escapeCsv(contactNumber));
    }

    /**
     * Creates a BaseUser object from a CSV string.
     * @param csvString The CSV string.
     * @return A BaseUser object, or null if the CSV is malformed.
     */
    public static BaseUser fromCsvString(String csvString) {
        if (csvString == null || csvString.trim().isEmpty()) {
            return null;
        }
        String[] parts = csvString.split(",", 5); // Expect 5 parts
        if (parts.length < 5) {
            System.err.println("Malformed CSV string for BaseUser: " + csvString + ". Expected 5 parts, got " + parts.length);
            return null;
        }
        // Unescape CSV parts if necessary, though basic implementation might not need it
        // if commas are not expected within fields or are handled by a more robust CSV parser.
        return new BaseUser(parts[0], parts[1], parts[2], parts[3], parts[4]);
    }

    /**
     * Helper method to escape commas in CSV fields if necessary.
     * For this project, we assume fields do not contain commas or are handled by simple splitting.
     * A more robust solution would use a CSV library or quote fields.
     * @param field The string field to escape.
     * @return The escaped string.
     */
    protected String escapeCsv(String field) {
        if (field == null) return "";
        // Basic: if field contains comma, quote it. If it contains quote, double the quote.
        // This is a simplified version. Real CSV handling is more complex.
        if (field.contains(",")) {
            return "\"" + field.replace("\"", "\"\"") + "\"";
        }
        return field;
    }
}
